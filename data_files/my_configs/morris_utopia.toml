# ----------------------------------------------------------
#            Configuration file for a Temoa Run
# Allows specification of run type and associated parameters
# ----------------------------------------------------------
#
# For toml format info see: https://toml.io/en/
#   - comments may be added with hash
#   - do NOT comment out table names in brackets like:  [<table>]

# Scenario Name (Mandatory)
# This scenario name is used to label results within the output .sqlite file
scenario = "chili"

# Scenaio Mode (Mandatory)
# See documentation for explanations.  A standard single run is "perfect_foresight"
# mode must be one of (case-insensitive):
#     [perfect_foresight, MGA, myopic, method_of_morris, build_only, check]
scenario_mode = "method_of_morris"

# Input database (Mandatory)
input_database = "data_files/example_dbs/morris_utopia.sqlite"

# Output file (Mandatory)
# The output file must be an existing .sqlite file
# For Pefrect Foresight, the user may target the same input file or a separate /
# copied sqlite file in a different location.  Myopic requires that input_database = output_database
output_database = "data_files/example_dbs/morris_utopia.sqlite"

# ------------------------------------
#        DATA / MODEL CHECKS
#  To check data / cost integrity
# ------------------------------------

# Check the pricing structure for common errors, which are reported in the log file
# Strongly recommended
price_check = true

# check the units in the source/destination databases for units consistency.  Errors
# are reported in log file and units_check.txt in output folder
units_check = true

# Check the network connectivity for processes in the model.  Strongly
# recommended to ensure proper performance.  Results are reported in log file
# This requires that source commodities be marked with 's' in Commodity table
# This is required for Myopic runs
source_trace = true

# Produce HTML files for Commodity Networks.  Requires source_trace above
plot_commodity_network = false

# ------------------------------------
#             SOLVER
#        Solver Selection
# ------------------------------------

# use the NEOS server to solve.  (Currently NOT supported)
neos = false

# solver (Mandatory)
# Depending on what client machine has installed.
#  [cbc, appsi_highs, gurobi, cplex, ...]
solver_name = "cbc"

# ------------------------------------
#             OUTPUTS
# select desired output products/files
# ------------------------------------

# generate an Excel file in the output_files folder
save_excel = false

# save the duals in the output Database (may slow execution slightly?)
save_duals = false

# save a copy of the pyomo-generated lp file(s) to the outputs folder (maybe a large file(s)!)
save_lp_file = false

# ---------------------------------------------------
#                   MODE OPTIONS
# options below are mode-specific and will be ignored
# if the run is not executed in that mode.
# ---------------------------------------------------
[MGA]



[myopic]
view_depth = 2   # number of periods seen/analyzed per iteration
step_size = 1    # number of periods to step by (must be <= view depth)

[morris]
perturbation = 0.10     # amount to perturb marked parameters (ex:  0.10 -> +/- 10%)
levels = 8              # number of levels in param grid (must be even number)
trajectories = 10        # number of Morris trajectories to generate/explore
seed = false               # random seed for use in generation/analysis for repeatable results.  false=system derived
cores = 0               # number of CPU cores to use.  0 (default) = cpu count
# Note:  Problem size (in general) is (Groups + 1) * trajectories see the SALib Dox
#        Groups = number of unique labels used in MM analysis columns in DB




